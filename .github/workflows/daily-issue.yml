name: Daily Code Review Reminder

on:
  schedule:
    - cron: '0 13 * * 1-5'
    - cron: '0 16 * * 1-5'
    - cron: '0 19 * * 1-5'
    - cron: '0 22 * * 1-5'
    - cron: '0 1 * * 2-6'
    - cron: '0 3 * * 2-6'
  workflow_dispatch:
    inputs:
      force:
        description: 'Bypass probability & time window and create an issue now'
        type: boolean
        default: true
      dry_run:
        description: 'Do everything except actually create the issue'
        type: boolean
        default: false

permissions:
  issues: write
  contents: read

jobs:
  create-daily-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Create Daily Review Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            // ----- Inputs -----
            const inputs = context.payload?.inputs || {};
            const FORCE = String(inputs.force || '') === 'true';
            const DRY_RUN = String(inputs.dry_run || '') === 'true';

            // ----- Helpers -----
            function nowInET() {
              const now = new Date();
              const fmt = new Intl.DateTimeFormat('en-US', {
                timeZone: 'America/New_York',
                year: 'numeric', month: '2-digit', day: '2-digit',
                hour: '2-digit', minute: '2-digit', second: '2-digit',
                hour12: false, weekday: 'short'
              });
              const parts = fmt.formatToParts(now).reduce((acc, p) => (acc[p.type]=p.value, acc), {});
              return {
                year: parts.year, month: parts.month, day: parts.day,
                hour: parseInt(parts.hour, 10),
                weekday: parts.weekday
              };
            }

            function etMidnightUtcIso({ year, month, day }) {
              // Compute ET midnight in UTC ISO (safe enough for our use)
              const etNow = new Date(new Date().toLocaleString('en-US', { timeZone: 'America/New_York' }));
              const runnerNow = new Date();
              const offsetMinutes = (runnerNow - etNow) / 60000;
              const etMidnightLocal = new Date(`${year}-${month}-${day}T00:00:00`);
              const utcFromEtMidnight = new Date(etMidnightLocal.getTime() + offsetMinutes * 60000);
              return utcFromEtMidnight.toISOString();
            }

            const et = nowInET();
            const { owner, repo } = context.repo;

            // ----- Skip conditions unless forced -----
            if (!FORCE) {
              // Weekend guard
              if (et.weekday === 'Sat' || et.weekday === 'Sun') {
                console.log('Skipping: Weekend (ET)');
                return;
              }
              // Time window 9:00–23:59 ET
              if (et.hour < 9) {
                console.log(`Skipping: Too early (${et.hour}:00 ET)`);
                return;
              }
              // Probability by run window
              const runHours = [9, 12, 15, 18, 21, 23]; // ET anchors
              let idx = runHours.findIndex(h => Math.abs(h - et.hour) <= 1);
              if (idx < 0) idx = runHours.length - 1;
              const probability = Math.max(0.1, 0.60 - 0.10 * idx);
              if (Math.random() > probability) {
                console.log(`Skipping this run (${(probability * 100).toFixed(0)}% chance declined)`);
                return;
              }
              console.log('Proceeding (passed probability + time checks)…');
            } else {
              console.log('FORCE=true → bypassing probability and time window.');
            }

            // ----- Build title/body -----
            const dateStr = `${et.year}-${et.month}-${et.day}`;
            const issueTitle = `Daily code review - ${dateStr}${FORCE ? ' [TEST]' : ''}`;
            const monthName = new Date(parseInt(et.year), parseInt(et.month)-1, parseInt(et.day))
              .toLocaleDateString('en-US', { month: 'long' })
              .toLowerCase();

            const issueBody = [
              '## Daily Code Review Checklist',
              '',
              '- [ ] Read one PR from a teammate or OSS project',
              '- [ ] Leave one actionable comment',
              '- [ ] Capture notes in your notes repo and link below',
              '',
              '### Notes',
              '<!-- Add your review notes or links here -->',
              `- [ ] Created notes at: \`notes/${et.year}/${et.month}-${monthName}/${dateStr}.md\``,
              FORCE ? '\n> Created via manual FORCE test run.' : ''
            ].join('\n');

            // ----- Avoid duplicates for today (ET) -----
            const sinceIso = etMidnightUtcIso(et);
            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo,
              state: 'all',
              labels: 'daily,review',
              since: sinceIso,
              per_page: 100
            });
            if (issues.some(i => i.title.startsWith(`Daily code review - ${dateStr}`))) {
              console.log(`Issue for ${dateStr} already exists. Skipping.`);
              return;
            }

            // Ensure labels exist
            async function ensureLabel(name, color, description) {
              try { await github.rest.issues.getLabel({ owner, repo, name }); }
              catch { await github.rest.issues.createLabel({ owner, repo, name, color, description }); }
            }
            await ensureLabel('daily', '1d76db', 'Daily automation');
            await ensureLabel('review', '0e8a16', 'Code review');
            if (FORCE) await ensureLabel('test', '5319e7', 'Manual test runs');

            if (DRY_RUN) {
              console.log('[DRY RUN] Would create issue with:');
              console.log({ owner, repo, title: issueTitle, labels: ['daily','review'].concat(FORCE?['test']:[]) });
              return;
            }

            // ----- Create the issue -----
            const { data: newIssue } = await github.rest.issues.create({
              owner, repo,
              title: issueTitle,
              body: issueBody,
              assignees: ['SamLarivs'],
              labels: ['daily', 'review'].concat(FORCE ? ['test'] : [])
            });

            console.log(`Created issue #${newIssue.number}: ${newIssue.title}`);
            console.log(`Issue URL: ${newIssue.html_url}`);
