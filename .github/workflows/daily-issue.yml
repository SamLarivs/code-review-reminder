name: Daily Code Review Reminder

on:
  schedule:
    # Run multiple times throughout the day (all times UTC)
    - cron: '0 13 * * 1-5'  # 8/9 AM ET
    - cron: '0 16 * * 1-5'  # 11 AM/12 PM ET  
    - cron: '0 19 * * 1-5'  # 2/3 PM ET
    - cron: '0 22 * * 1-5'  # 5/6 PM ET
    - cron: '0 1 * * 2-6'   # 8/9 PM ET (runs Tue-Sat for Mon-Fri)
    - cron: '0 3 * * 2-6'   # 10/11 PM ET (runs Tue-Sat for Mon-Fri)
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  create-daily-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Create Daily Review Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Function to get current date in ET
            function getETDate() {
              const now = new Date();
              // Convert to ET timezone
              const etTime = new Intl.DateTimeFormat('en-US', {
                timeZone: 'America/New_York',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                hour12: false,
                weekday: 'short'
              }).format(now);
              
              const parts = etTime.split(', ');
              const dayOfWeek = parts[0];
              const [month, day, year] = parts[1].split('/');
              const hour = parseInt(parts[2].split(':')[0]);
              
              return { year, month, day, hour, dayOfWeek };
            }
            
            // Check if we should run today
            const { dayOfWeek, hour } = getETDate();
            
            // Skip weekends
            if (dayOfWeek === 'Sat' || dayOfWeek === 'Sun') {
              console.log('Skipping: Weekend');
              return;
            }
            
            // Only run if we're within the desired window (9 AM - 11:59 PM ET)
            if (hour < 9) {
              console.log(`Skipping: Too early (${hour}:00 ET)`);
              return;
            }
            
            // Progressive probability: decreases throughout the day
            const runHours = [9, 12, 15, 18, 21, 23]; // Approximate ET hours for each run
            const currentRunIndex = runHours.findIndex(h => Math.abs(h - hour) <= 1);
            
            // Start with 60% and decrease by 10% each run  
            // Run 1: 60%, Run 2: 50%, Run 3: 40%, Run 4: 30%, Run 5: 20%, Run 6: 10%
            const probability = 0.60 - (0.10 * currentRunIndex);
            
            if (Math.random() > probability) {
              console.log(`Skipping this run (${(probability * 100).toFixed(0)}% chance declined)`);
              return;
            }
            
            console.log('Proceeding to check/create issue...');
            
            // Get current date for issue title
            const { year, month, day } = getETDate();
            const dateStr = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
            const issueTitle = `Daily code review - ${dateStr}`;
            
            // Check if today's issue already exists
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              labels: 'daily,review',
              since: new Date(new Date().setHours(0, 0, 0, 0)).toISOString()
            });
            
            const issueExists = existingIssues.some(issue => issue.title === issueTitle);
            
            if (issueExists) {
              console.log(`Issue for ${dateStr} already exists. Skipping...`);
              return;
            }
            
            // Create the issue
            const monthName = new Date(parseInt(year), parseInt(month)-1, parseInt(day)).toLocaleDateString('en-US', { month: 'long' }).toLowerCase();
            const issueBody = [
              '## Daily Code Review Checklist',
              '',
              '- [ ] Read one PR from a teammate or OSS project',
              '- [ ] Leave one actionable comment',
              '- [ ] Capture notes in your notes repo and link below',
              '',
              '### Notes',
              '<!-- Add your review notes or links here -->',
              `- [ ] Created notes at: \`notes/${year}/${month.padStart(2, '0')}-${monthName}/${dateStr}.md\``
            ].join('\n');
            
            try {
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                assignees: ['SamLarivs'],
                labels: ['daily', 'review']
              });
              
              console.log(`Created issue #${newIssue.number}: ${newIssue.title}`);
              console.log(`Issue URL: ${newIssue.html_url}`);
            } catch (error) {
              console.error('Error creating issue:', error);
              throw error;
            }